// Don't import root.scss here
@use 'sass:string' as string;
@use 'sass:list' as list;

// this function converts number-string "123" to number 123
@function Number($string) {
    $strings: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9';
    $numbers: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9;

    $result: 0;
    $minus: false;
    $divider: 0;

    @for $i from 1 through string.length($string) {
        $character: string.slice($string, $i, $i);
        $index: list.index($strings, $character);

        @if $character == '-' {
            $minus: true;
        } @else if $character == '.' {
            $divider: 1;
        } @else {
            @if not $index {
                @warn "Unknown character #{$character}.";
                @return false;
            } // this is here to make sure that there is no sneaky character pass in

            $number: list.nth($numbers, $index);

            @if $divider == 0 {
                $result: calc($result * 10);
            } @else {
                $divider: calc($divider * 10);
                $number: calc($number / $divider);
            }

            $result: calc($result + $number);
        }
    }

    @return if(
        $minus,
        $result * -1,
        $result
    ); // return second arg if $minus true.
}

// this function convert px to rem. usage: convertPxToRem(32px) -> 2rem
// this function depends on the Number() function above.

@function toRem($px) {
    $string_px: #{$px}; // convert it to string so we can remove the px
    $index: string.index(
        $string: $string_px,
        $substring: 'px',
    ); // finding the index of px

    @if $index {
        $string_px: string.slice(
            $string: $string_px,
            $start-at: 1,
            $end-at: $index - 1,
        ); // getting only the string-number
    } @else {
        @warn "#{$index} is not a px";
        @return false;
    }
    $number_px: Number(
        $string_px
    ); // converting the string-number from string to number
    @debug type-of(
        $number_px
    ); // making sure it's a number in order to calculate later
    $number_rem: calc($number_px / 10) + rem;
    @return $number_rem;
}
